//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Scripts/Inputs/SF_Inputs.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @SF_Inputs: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @SF_Inputs()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""SF_Inputs"",
    ""maps"": [
        {
            ""name"": ""Truck"",
            ""id"": ""94cc3435-cb62-4cb9-8e80-561d5bae8bea"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""1a7196fc-4039-49ac-aa1c-617ea605d8e2"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Rotate"",
                    ""type"": ""Value"",
                    ""id"": ""1fb6cb41-2bdd-4cb0-b249-dc2c51c65a2b"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Record"",
                    ""type"": ""Button"",
                    ""id"": ""8f0a95a1-2d76-4b60-95fd-99db7059e636"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Rewind"",
                    ""type"": ""Button"",
                    ""id"": ""13688881-0c8a-4542-80e0-b071fcaa08e1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""a644cd3c-51aa-43f3-826c-4164f1bf52ae"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""be9d5b90-9e8e-4794-bf6c-04f2bc3165de"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""d7aa7882-4848-47a6-8947-25defe11acc1"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""31c3a57d-01fe-4e4d-b4f6-402edfcbd986"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""65c634e9-77d4-412f-af40-10e8b2143092"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""157ea456-e99d-4a7d-854d-bb0e33a65b50"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""8f0bdccd-1dbc-4c52-8f2a-f1224d093922"",
                    ""path"": ""<Mouse>/delta/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""31de10e1-90e1-4f92-8a0a-aeed251421eb"",
                    ""path"": ""<Mouse>/delta/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""655930f1-65fe-4d3b-adb0-5c0984ded02c"",
                    ""path"": ""<Mouse>/delta/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""707bdf9d-b7ad-4fc0-a251-8ec5803aa6b1"",
                    ""path"": ""<Mouse>/delta/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""91ed9cc0-d40f-43c7-b330-4ae781a31fdb"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Record"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""290fc257-690f-4c37-a26e-de0bda2267e0"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rewind"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Truck
        m_Truck = asset.FindActionMap("Truck", throwIfNotFound: true);
        m_Truck_Move = m_Truck.FindAction("Move", throwIfNotFound: true);
        m_Truck_Rotate = m_Truck.FindAction("Rotate", throwIfNotFound: true);
        m_Truck_Record = m_Truck.FindAction("Record", throwIfNotFound: true);
        m_Truck_Rewind = m_Truck.FindAction("Rewind", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Truck
    private readonly InputActionMap m_Truck;
    private List<ITruckActions> m_TruckActionsCallbackInterfaces = new List<ITruckActions>();
    private readonly InputAction m_Truck_Move;
    private readonly InputAction m_Truck_Rotate;
    private readonly InputAction m_Truck_Record;
    private readonly InputAction m_Truck_Rewind;
    public struct TruckActions
    {
        private @SF_Inputs m_Wrapper;
        public TruckActions(@SF_Inputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_Truck_Move;
        public InputAction @Rotate => m_Wrapper.m_Truck_Rotate;
        public InputAction @Record => m_Wrapper.m_Truck_Record;
        public InputAction @Rewind => m_Wrapper.m_Truck_Rewind;
        public InputActionMap Get() { return m_Wrapper.m_Truck; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(TruckActions set) { return set.Get(); }
        public void AddCallbacks(ITruckActions instance)
        {
            if (instance == null || m_Wrapper.m_TruckActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_TruckActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @Rotate.started += instance.OnRotate;
            @Rotate.performed += instance.OnRotate;
            @Rotate.canceled += instance.OnRotate;
            @Record.started += instance.OnRecord;
            @Record.performed += instance.OnRecord;
            @Record.canceled += instance.OnRecord;
            @Rewind.started += instance.OnRewind;
            @Rewind.performed += instance.OnRewind;
            @Rewind.canceled += instance.OnRewind;
        }

        private void UnregisterCallbacks(ITruckActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @Rotate.started -= instance.OnRotate;
            @Rotate.performed -= instance.OnRotate;
            @Rotate.canceled -= instance.OnRotate;
            @Record.started -= instance.OnRecord;
            @Record.performed -= instance.OnRecord;
            @Record.canceled -= instance.OnRecord;
            @Rewind.started -= instance.OnRewind;
            @Rewind.performed -= instance.OnRewind;
            @Rewind.canceled -= instance.OnRewind;
        }

        public void RemoveCallbacks(ITruckActions instance)
        {
            if (m_Wrapper.m_TruckActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ITruckActions instance)
        {
            foreach (var item in m_Wrapper.m_TruckActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_TruckActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public TruckActions @Truck => new TruckActions(this);
    public interface ITruckActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnRotate(InputAction.CallbackContext context);
        void OnRecord(InputAction.CallbackContext context);
        void OnRewind(InputAction.CallbackContext context);
    }
}
